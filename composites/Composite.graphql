type Query {
  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  pieceIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PieceConnection
  pieceCount: Int!
  pinLikeIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PinLikeConnection
  pinLikeCount: Int!
  pinDislikeIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PinDislikeConnection
  pinDislikeCount: Int!
  ethAccountIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): EthAccountConnection
  ethAccountCount: Int!
  categoryIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CategoryConnection
  categoryCount: Int!
  subscriptionIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): SubscriptionConnection
  subscriptionCount: Int!
  artistIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ArtistConnection
  artistCount: Int!
  pinIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PinConnection
  pinCount: Int!
  featuredIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): FeaturedConnection
  featuredCount: Int!
  websiteIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): WebsiteConnection
  websiteCount: Int!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  pieceList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PieceConnection
  pieceListCount: Int!
  pinLikeList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PinLikeConnection
  pinLikeListCount: Int!
  pinDislikeList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PinDislikeConnection
  pinDislikeListCount: Int!
  ethAccountList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): EthAccountConnection
  ethAccountListCount: Int!
  categoryList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CategoryConnection
  categoryListCount: Int!
  subscriptionList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): SubscriptionConnection
  subscriptionListCount: Int!
  artistList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ArtistConnection
  artistListCount: Int!
  pinList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PinConnection
  pinListCount: Int!
  featuredList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): FeaturedConnection
  featuredListCount: Int!
  websiteList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): WebsiteConnection
  websiteListCount: Int!
}

"""A connection to a list of items."""
type PieceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PieceEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PieceEdge {
  """The item at the end of the edge"""
  node: Piece

  """A cursor for use in pagination"""
  cursor: String!
}

type Piece implements Node {
  id: ID!
  cid: String
  name: String
  details: PieceDetails
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PieceDetails {
  tags: String
  type: String
  media: String
  IMDBID: String
  TMDBID: String
  format: String
  poster: String
  bitrate: String
  albumTitle: String
  releaseType: String
  musicBrainzID: String
  imageThumbnailCID: String
  initialReleaseYear: String
  releaseDescription: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A connection to a list of items."""
type PinLikeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PinLikeEdge]
}

"""An edge in a connection."""
type PinLikeEdge {
  """The item at the end of the edge"""
  node: PinLike

  """A cursor for use in pagination"""
  cursor: String!
}

type PinLike implements Node {
  id: ID!
  pinID: CeramicStreamID!
  ownerID: CeramicStreamID!
  categoryID: CeramicStreamID!
  pin: Pin
  owner: EthAccount
  category: Category
}

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#streamid")

type Pin implements Node {
  id: ID!
  deleted: Boolean
  ownerID: CeramicStreamID!
  pieceID: CeramicStreamID!
  approved: Boolean
  artistID: CeramicStreamID!
  rejected: Boolean
  websiteID: CeramicStreamID!
  categoryID: CeramicStreamID!
  rejectionReason: String
  owner: EthAccount
  piece: Piece
  artist: Artist
  website: Website
  category: Category
  likes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): PinLikeConnection!
  likesCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  dislikes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): PinDislikeConnection!
  dislikesCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
}

type EthAccount implements Node {
  id: ID!
  address: String!
  isAdmin: Boolean!
  settings: EthAccountSettings!
  createdAt: String!
  updatedAt: String!
  websiteID: CeramicStreamID!
  isSuperAdmin: Boolean!
  pins(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): PinConnection!
  pinsCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  pinLikes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): PinLikeConnection!
  pinLikesCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  pinDislikes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): PinDislikeConnection!
  pinDislikesCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
}

type EthAccountSettings {
  autoplay: Boolean!
}

"""A connection to a list of items."""
type PinConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PinEdge]
}

"""An edge in a connection."""
type PinEdge {
  """The item at the end of the edge"""
  node: Pin

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type PinDislikeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PinDislikeEdge]
}

"""An edge in a connection."""
type PinDislikeEdge {
  """The item at the end of the edge"""
  node: PinDislike

  """A cursor for use in pagination"""
  cursor: String!
}

type PinDislike implements Node {
  id: ID!
  pinID: CeramicStreamID!
  ownerID: CeramicStreamID!
  categoryID: CeramicStreamID!
  pin: Pin
  owner: EthAccount
  category: Category
}

type Category implements Node {
  id: ID!
  name: String!
  websiteID: CeramicStreamID!
  website: Website
  pins(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): PinConnection!
  pinsCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  likes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): PinLikeConnection!
  likesCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  dislikes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): PinDislikeConnection!
  dislikesCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
}

type Website implements Node {
  id: ID!
  name: String!
  image: String
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String
  categories(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): CategoryConnection!
  categoriesCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  pins(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): PinConnection!
  pinsCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  featured(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): FeaturedConnection!
  featuredCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  subscriptions(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): SubscriptionConnection!
  subscriptionsCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
  users(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): EthAccountConnection!
  usersCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge"""
  node: Category

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type FeaturedConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeaturedEdge]
}

"""An edge in a connection."""
type FeaturedEdge {
  """The item at the end of the edge"""
  node: Featured

  """A cursor for use in pagination"""
  cursor: String!
}

type Featured implements Node {
  id: ID!
  endAt: DateTime!
  pinID: CeramicStreamID!
  startAt: DateTime!
  websiteID: CeramicStreamID!
  pin: Pin
  website: Website
}

"""A connection to a list of items."""
type SubscriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubscriptionEdge]
}

"""An edge in a connection."""
type SubscriptionEdge {
  """The item at the end of the edge"""
  node: Subscription

  """A cursor for use in pagination"""
  cursor: String!
}

type Subscription implements Node {
  id: ID!
  inactive: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  websiteID: CeramicStreamID!
  subscribedID: CeramicStreamID!
  website: Website
  subscribedWebsite: Website
}

"""A connection to a list of items."""
type EthAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EthAccountEdge]
}

"""An edge in a connection."""
type EthAccountEdge {
  """The item at the end of the edge"""
  node: EthAccount

  """A cursor for use in pagination"""
  cursor: String!
}

type Artist implements Node {
  id: ID!
  name: String
  pins(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
  ): PinConnection!
  pinsCount(
    """Counts only documents created by the provided account"""
    account: ID
  ): Int!
}

"""A connection to a list of items."""
type ArtistConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArtistEdge]
}

"""An edge in a connection."""
type ArtistEdge {
  """The item at the end of the edge"""
  node: Artist

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type WebsiteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebsiteEdge]
}

"""An edge in a connection."""
type WebsiteEdge {
  """The item at the end of the edge"""
  node: Website

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createPiece(input: CreatePieceInput!): CreatePiecePayload
  updatePiece(input: UpdatePieceInput!): UpdatePiecePayload
  createPinLike(input: CreatePinLikeInput!): CreatePinLikePayload
  updatePinLike(input: UpdatePinLikeInput!): UpdatePinLikePayload
  createPinDislike(input: CreatePinDislikeInput!): CreatePinDislikePayload
  updatePinDislike(input: UpdatePinDislikeInput!): UpdatePinDislikePayload
  createEthAccount(input: CreateEthAccountInput!): CreateEthAccountPayload
  updateEthAccount(input: UpdateEthAccountInput!): UpdateEthAccountPayload
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload
  updateCategory(input: UpdateCategoryInput!): UpdateCategoryPayload
  createSubscription(input: CreateSubscriptionInput!): CreateSubscriptionPayload
  updateSubscription(input: UpdateSubscriptionInput!): UpdateSubscriptionPayload
  createArtist(input: CreateArtistInput!): CreateArtistPayload
  updateArtist(input: UpdateArtistInput!): UpdateArtistPayload
  createPin(input: CreatePinInput!): CreatePinPayload
  updatePin(input: UpdatePinInput!): UpdatePinPayload
  createFeatured(input: CreateFeaturedInput!): CreateFeaturedPayload
  updateFeatured(input: UpdateFeaturedInput!): UpdateFeaturedPayload
  createWebsite(input: CreateWebsiteInput!): CreateWebsitePayload
  updateWebsite(input: UpdateWebsiteInput!): UpdateWebsitePayload
}

type CreatePiecePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Piece!
  clientMutationId: String
}

input CreatePieceInput {
  content: PieceInput!
  clientMutationId: String
}

input PieceInput {
  cid: String
  name: String
  details: PieceDetailsInput
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PieceDetailsInput {
  tags: String
  type: String
  media: String
  IMDBID: String
  TMDBID: String
  format: String
  poster: String
  bitrate: String
  albumTitle: String
  releaseType: String
  musicBrainzID: String
  imageThumbnailCID: String
  initialReleaseYear: String
  releaseDescription: String
}

type UpdatePiecePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Piece!
  clientMutationId: String
}

input UpdatePieceInput {
  id: ID!
  content: PartialPieceInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialPieceInput {
  cid: String
  name: String
  details: PieceDetailsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#commitid")

type CreatePinLikePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: PinLike!
  clientMutationId: String
}

input CreatePinLikeInput {
  content: PinLikeInput!
  clientMutationId: String
}

input PinLikeInput {
  pinID: CeramicStreamID!
  ownerID: CeramicStreamID!
  categoryID: CeramicStreamID!
}

type UpdatePinLikePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: PinLike!
  clientMutationId: String
}

input UpdatePinLikeInput {
  id: ID!
  content: PartialPinLikeInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialPinLikeInput {
  pinID: CeramicStreamID
  ownerID: CeramicStreamID
  categoryID: CeramicStreamID
}

type CreatePinDislikePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: PinDislike!
  clientMutationId: String
}

input CreatePinDislikeInput {
  content: PinDislikeInput!
  clientMutationId: String
}

input PinDislikeInput {
  pinID: CeramicStreamID!
  ownerID: CeramicStreamID!
  categoryID: CeramicStreamID!
}

type UpdatePinDislikePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: PinDislike!
  clientMutationId: String
}

input UpdatePinDislikeInput {
  id: ID!
  content: PartialPinDislikeInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialPinDislikeInput {
  pinID: CeramicStreamID
  ownerID: CeramicStreamID
  categoryID: CeramicStreamID
}

type CreateEthAccountPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: EthAccount!
  clientMutationId: String
}

input CreateEthAccountInput {
  content: EthAccountInput!
  clientMutationId: String
}

input EthAccountInput {
  address: String!
  isAdmin: Boolean!
  settings: EthAccountSettingsInput!
  createdAt: String!
  updatedAt: String!
  websiteID: CeramicStreamID!
  isSuperAdmin: Boolean!
}

input EthAccountSettingsInput {
  autoplay: Boolean!
}

type UpdateEthAccountPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: EthAccount!
  clientMutationId: String
}

input UpdateEthAccountInput {
  id: ID!
  content: PartialEthAccountInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialEthAccountInput {
  address: String
  isAdmin: Boolean
  settings: EthAccountSettingsInput
  createdAt: String
  updatedAt: String
  websiteID: CeramicStreamID
  isSuperAdmin: Boolean
}

type CreateCategoryPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Category!
  clientMutationId: String
}

input CreateCategoryInput {
  content: CategoryInput!
  clientMutationId: String
}

input CategoryInput {
  name: String!
  websiteID: CeramicStreamID!
}

type UpdateCategoryPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Category!
  clientMutationId: String
}

input UpdateCategoryInput {
  id: ID!
  content: PartialCategoryInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialCategoryInput {
  name: String
  websiteID: CeramicStreamID
}

type CreateSubscriptionPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Subscription!
  clientMutationId: String
}

input CreateSubscriptionInput {
  content: SubscriptionInput!
  clientMutationId: String
}

input SubscriptionInput {
  inactive: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  websiteID: CeramicStreamID!
  subscribedID: CeramicStreamID!
}

type UpdateSubscriptionPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Subscription!
  clientMutationId: String
}

input UpdateSubscriptionInput {
  id: ID!
  content: PartialSubscriptionInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialSubscriptionInput {
  inactive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  websiteID: CeramicStreamID
  subscribedID: CeramicStreamID
}

type CreateArtistPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Artist!
  clientMutationId: String
}

input CreateArtistInput {
  content: ArtistInput!
  clientMutationId: String
}

input ArtistInput {
  name: String
}

type UpdateArtistPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Artist!
  clientMutationId: String
}

input UpdateArtistInput {
  id: ID!
  content: PartialArtistInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialArtistInput {
  name: String
}

type CreatePinPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Pin!
  clientMutationId: String
}

input CreatePinInput {
  content: PinInput!
  clientMutationId: String
}

input PinInput {
  deleted: Boolean
  ownerID: CeramicStreamID!
  pieceID: CeramicStreamID!
  approved: Boolean
  artistID: CeramicStreamID!
  rejected: Boolean
  websiteID: CeramicStreamID!
  categoryID: CeramicStreamID!
  rejectionReason: String
}

type UpdatePinPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Pin!
  clientMutationId: String
}

input UpdatePinInput {
  id: ID!
  content: PartialPinInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialPinInput {
  deleted: Boolean
  ownerID: CeramicStreamID
  pieceID: CeramicStreamID
  approved: Boolean
  artistID: CeramicStreamID
  rejected: Boolean
  websiteID: CeramicStreamID
  categoryID: CeramicStreamID
  rejectionReason: String
}

type CreateFeaturedPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Featured!
  clientMutationId: String
}

input CreateFeaturedInput {
  content: FeaturedInput!
  clientMutationId: String
}

input FeaturedInput {
  endAt: DateTime!
  pinID: CeramicStreamID!
  startAt: DateTime!
  websiteID: CeramicStreamID!
}

type UpdateFeaturedPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Featured!
  clientMutationId: String
}

input UpdateFeaturedInput {
  id: ID!
  content: PartialFeaturedInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialFeaturedInput {
  endAt: DateTime
  pinID: CeramicStreamID
  startAt: DateTime
  websiteID: CeramicStreamID
}

type CreateWebsitePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Website!
  clientMutationId: String
}

input CreateWebsiteInput {
  content: WebsiteInput!
  clientMutationId: String
}

input WebsiteInput {
  name: String!
  image: String
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String
}

type UpdateWebsitePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Website!
  clientMutationId: String
}

input UpdateWebsiteInput {
  id: ID!
  content: PartialWebsiteInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialWebsiteInput {
  name: String
  image: String
  createdAt: DateTime
  updatedAt: DateTime
  description: String
}